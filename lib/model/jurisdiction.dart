// Copyright 2022 Giammarco Boscaro. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

//
// AUTO-GENERATED FILE, DO NOT MODIFY!
//
// @dart=2.17

// ignore_for_file: unused_element, unused_import
// ignore_for_file: always_put_required_named_parameters_first
// ignore_for_file: constant_identifier_names
// ignore_for_file: lines_longer_than_80_chars

part of it.docusign.sdk.esignature;

class Jurisdiction {
  /// Returns a new [Jurisdiction] instance.
  Jurisdiction({
    this.allowSystemCreatedSeal,
    this.allowUserUploadedSeal,
    this.commissionIdInSeal,
    this.county,
    this.countyInSeal,
    this.enabled,
    this.jurisdictionId,
    this.name,
    this.notaryPublicInSeal,
    this.stateNameInSeal,
  });

  /// When **true,** the seal can be generated by the platform.
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? allowSystemCreatedSeal;

  /// When **true,** the seal can be uploaded by the user.
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? allowUserUploadedSeal;

  /// When **true,** the notary's `comissionId` appears in the seal.
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? commissionIdInSeal;

  /// The county of the jurisdiction.
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? county;

  /// When **true,** the county name appears in the seal.
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? countyInSeal;

  /// When **true,** this jurisdiction is enabled.
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? enabled;

  /// The ID of the jurisdiction. The following jurisdictions are supported:  -  `5 - California` -  `6 - Colorado` -  `9 - Florida` -  `10 - Georgia` -  `12 - Idaho` -  `13 - Illinois` -  `14 - Indiana` -  `15 - Iowa` -  `17 - Kentucky` -  `23 - Minnesota` -  `25 - Missouri` -  `30 - New Jersey` -  `32 - New York` -  `33 - North Carolina` -  `35 - Ohio` -  `37 - Oregon` -  `38 - Pennsylvania` -  `40 - South Carolina` -  `43 - Texas` -  `44 - Utah` -  `47 - Washington` -  `48 - West Virginia` -  `49 - Wisconsin` -  `62 - Florida Commissioner of Deeds` 
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? jurisdictionId;

  /// The name of the jurisdiction. Typically the state name.
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? name;

  /// When **true,** the name of the notary appears in the seal.
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? notaryPublicInSeal;

  /// When **true,** the name of the state appears in the seal.
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? stateNameInSeal;

  @override
  bool operator ==(Object other) => identical(this, other) || other is Jurisdiction &&
     other.allowSystemCreatedSeal == allowSystemCreatedSeal &&
     other.allowUserUploadedSeal == allowUserUploadedSeal &&
     other.commissionIdInSeal == commissionIdInSeal &&
     other.county == county &&
     other.countyInSeal == countyInSeal &&
     other.enabled == enabled &&
     other.jurisdictionId == jurisdictionId &&
     other.name == name &&
     other.notaryPublicInSeal == notaryPublicInSeal &&
     other.stateNameInSeal == stateNameInSeal;

  @override
  int get hashCode =>
    // ignore: unnecessary_parenthesis
    (allowSystemCreatedSeal == null ? 0 : allowSystemCreatedSeal!.hashCode) +
    (allowUserUploadedSeal == null ? 0 : allowUserUploadedSeal!.hashCode) +
    (commissionIdInSeal == null ? 0 : commissionIdInSeal!.hashCode) +
    (county == null ? 0 : county!.hashCode) +
    (countyInSeal == null ? 0 : countyInSeal!.hashCode) +
    (enabled == null ? 0 : enabled!.hashCode) +
    (jurisdictionId == null ? 0 : jurisdictionId!.hashCode) +
    (name == null ? 0 : name!.hashCode) +
    (notaryPublicInSeal == null ? 0 : notaryPublicInSeal!.hashCode) +
    (stateNameInSeal == null ? 0 : stateNameInSeal!.hashCode);

  @override
  String toString() => 'Jurisdiction[allowSystemCreatedSeal=$allowSystemCreatedSeal, allowUserUploadedSeal=$allowUserUploadedSeal, commissionIdInSeal=$commissionIdInSeal, county=$county, countyInSeal=$countyInSeal, enabled=$enabled, jurisdictionId=$jurisdictionId, name=$name, notaryPublicInSeal=$notaryPublicInSeal, stateNameInSeal=$stateNameInSeal]';

  Map<String, dynamic> toJson() {
    final _json = <String, dynamic>{};
    if (allowSystemCreatedSeal != null) {
      _json[r'allowSystemCreatedSeal'] = allowSystemCreatedSeal;
    }
    if (allowUserUploadedSeal != null) {
      _json[r'allowUserUploadedSeal'] = allowUserUploadedSeal;
    }
    if (commissionIdInSeal != null) {
      _json[r'commissionIdInSeal'] = commissionIdInSeal;
    }
    if (county != null) {
      _json[r'county'] = county;
    }
    if (countyInSeal != null) {
      _json[r'countyInSeal'] = countyInSeal;
    }
    if (enabled != null) {
      _json[r'enabled'] = enabled;
    }
    if (jurisdictionId != null) {
      _json[r'jurisdictionId'] = jurisdictionId;
    }
    if (name != null) {
      _json[r'name'] = name;
    }
    if (notaryPublicInSeal != null) {
      _json[r'notaryPublicInSeal'] = notaryPublicInSeal;
    }
    if (stateNameInSeal != null) {
      _json[r'stateNameInSeal'] = stateNameInSeal;
    }
    return _json;
  }

  /// Returns a new [Jurisdiction] instance and imports its values from
  /// [value] if it's a [Map], null otherwise.
  // ignore: prefer_constructors_over_static_methods
  static Jurisdiction? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      // Ensure that the map contains the required keys.
      // Note 1: the values aren't checked for validity beyond being non-null.
      // Note 2: this code is stripped in release mode!
      assert(() {
        requiredKeys.forEach((key) {
          assert(json.containsKey(key), 'Required key "Jurisdiction[$key]" is missing from JSON.');
          assert(json[key] != null, 'Required key "Jurisdiction[$key]" has a null value in JSON.');
        });
        return true;
      }());

      return Jurisdiction(
        allowSystemCreatedSeal: mapValueOfType<String>(json, r'allowSystemCreatedSeal'),
        allowUserUploadedSeal: mapValueOfType<String>(json, r'allowUserUploadedSeal'),
        commissionIdInSeal: mapValueOfType<String>(json, r'commissionIdInSeal'),
        county: mapValueOfType<String>(json, r'county'),
        countyInSeal: mapValueOfType<String>(json, r'countyInSeal'),
        enabled: mapValueOfType<String>(json, r'enabled'),
        jurisdictionId: mapValueOfType<String>(json, r'jurisdictionId'),
        name: mapValueOfType<String>(json, r'name'),
        notaryPublicInSeal: mapValueOfType<String>(json, r'notaryPublicInSeal'),
        stateNameInSeal: mapValueOfType<String>(json, r'stateNameInSeal'),
      );
    }
    return null;
  }

  static List<Jurisdiction>? listFromJson(dynamic json, {bool growable = false,}) {
    final result = <Jurisdiction>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = Jurisdiction.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  static Map<String, Jurisdiction> mapFromJson(dynamic json) {
    final map = <String, Jurisdiction>{};
    if (json is Map && json.isNotEmpty) {
      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
      for (final entry in json.entries) {
        final value = Jurisdiction.fromJson(entry.value);
        if (value != null) {
          map[entry.key] = value;
        }
      }
    }
    return map;
  }

  // maps a json object with a list of Jurisdiction-objects as value to a dart map
  static Map<String, List<Jurisdiction>> mapListFromJson(dynamic json, {bool growable = false,}) {
    final map = <String, List<Jurisdiction>>{};
    if (json is Map && json.isNotEmpty) {
      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
      for (final entry in json.entries) {
        final value = Jurisdiction.listFromJson(entry.value, growable: growable,);
        if (value != null) {
          map[entry.key] = value;
        }
      }
    }
    return map;
  }

  /// The list of required keys that must be present in a JSON.
  static const requiredKeys = <String>{
  };
}

